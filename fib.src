; Print the well-known Fibonacci sequence
;
; Our word size is only 32-bits, so we can't
; count very far.
;
; Program starts as main:

&main jmp

count: ; variable for counter (or, a placeholder for a variable)
  nop

countinit:
  46 &count stor
  popip

countget: ; ( -- counter )
  &count load     ; load number
  popip

countdec: ; ( -- counter )
  countget
  1 swap sub      ; decrement by one
  dup &count stor ; store result
  popip

show: ; print number
  dup outnum
  '\n' out
  popip

dup2: ; ( a b -- a b a b ) duplicate
  swap       ; b a
  dup        ; b a a
  rol3       ; a a b
  dup        ; a a b b
  rol3       ; a b b a
  swap       ; a b a b
  popip

main:
  0 show  ; first Fibonacci number
  1       ; second Fibonacci number

  countinit

loop:
  dup2 ; a b -- a b a b

  ; add top numbers and show
  add show

  ; decrement, loop if non-zero
  countdec &loop swap jnz

  ; if zero, stop
  halt

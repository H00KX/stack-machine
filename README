This toy project contains:

- A simple, stack-based virtual machine for executing low-level instructions
- An assembler, supporting a Forth/PostScript-like language
- An interpreter, able to run compiled programs

To see an example of the assembly language, take a look at the Fibonacci
number generator in fib.src -- github users can see an online version in
fib.txt.

Instructions are 32-bits wide, and so are arithmetic operands.

By default, programs have 1 Mb available for text and data.  They occupy
the same memory space, so you can easily write self-modifying code.

There are two stacks; one for the instruction pointer, and one for the data.
They live separately from the text and data region, and are only limited by
process heap sizes.

To compile and run the examples:

  make all check

To see the low-level machine instructions:

  ./smr -h

To execute source code on-the-fly:

  ./sm filename

To compile source to bytecode:

  ./smc filename

The assembly language is not documented other than in code, because I'm
actively playing with it.

Although the interpreter is slow, it should be possible to convert stack
operations to a register machine.  In fact, it should be trivial to compile
programs to native machine code, e.g. x86.

Placed in the public domain in 2010 by the author, Christian Stigen Larsen
http://csl.sublevel3.org
